pipeline {    
    agent {
        kubernetes {
            inheritFrom 'buildah' 
        }
    }
    environment { 
        QUAY_CREDS = credentials("${quay_creds}") 
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
        durabilityHint('PERFORMANCE_OPTIMIZED')
        disableConcurrentBuilds()
        skipDefaultCheckout true
    }
    
    stages {
        stage('checkout') {
            steps {
                checkout([$class: "GitSCM",
                    branches: [[name: "${branch_name}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${github_creds}", url: "${repo_url}"]]     
                ])
            }
        }

        
        stage('Build with Buildah') {
            steps {
                container('buildah') {
                    script {
                        readCache name: 'buildah-cache'
                        dir('./buildah-cache') {
                            sh 'cp ./Dockerfile .'
                            sh "buildah build --storage-driver=vfs -t quay.io/${quay_repo}/${image_name} . "
                            sh "echo ${QUAY_CREDS_PSW} | buildah login -u ${QUAY_CREDS_USR} --password-stdin quay.io"
                            sh "buildah push --storage-driver=vfs quay.io/${quay_repo}/${image_name}"
                        }
                        writeCache name: 'buildah-cache', includes: ' **/*'
                    }
                }
            }
        }
        
        stage('deployment') {
            steps {
                script {
                    wrap([$class: 'OpenShiftBuildWrapper',  
                          installation: 'oc', 
                          url: "${openshift_url}", 
                          insecure: true, 
                          credentialsId: "${sa_token}"]) { 
                        sh "oc project ${openshift_project}"
                        def deploymentExists = sh(script: "oc get deploy/${app_name}", returnStatus: true) == 0
                        if (deploymentExists) {
                            echo "Deployment ${app_name} exists, refreshing app..."
                            sh "oc set image deployment/${app_name} ${app_name}=${app_name}:latest"
                            sh "oc rollout restart deployment/${app_name}"
                        } else {
                            echo "Deployment ${app_name} does not exist, deploying app..."
                            sh "oc new-app --image=quay.io/${quay_repo}/${image_name} --name=${app_name}"
                            //sh "oc set env --from=secret/app-secrets deploy/${app_name}"
                            //sh "oc set env --from=configmap/app-configmap deploy/${app_name}"
                            sh "oc expose svc/${app_name}"
                            //sh "oc set triggers deploy/${app_name} --from-image=${app_name}:latest -c ${app_name}"
                        }
                    }
                }
            }
        }
    }
    // post {
    //     always {
    //         container('buildah') {
    //             sh "buildah logout quay.io"
    //         }
    //     }
    // }
}
